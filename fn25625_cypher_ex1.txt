CREATE (you:Person {name:"You"})
RETURN you

MATCH  (you:Person {name:"You"})
CREATE (you)-[like:LIKE]->(neo:Database {name:"Neo4j" })
RETURN you,like,neo

MATCH (you:Person {name:"You"})
FOREACH (name in ["Johan","Rajesh","Anna","Julia","Andrew"] |
  CREATE (you)-[:FRIEND]->(:Person {name:name}))

MATCH (you {name:"You"})-[:FRIEND]->(yourFriends)
RETURN you, yourFriends

MATCH (neo:Database {name:"Neo4j"})
MATCH (anna:Person {name:"Anna"})
CREATE (anna)-[:FRIEND]->(:Person:Expert {name:"Amanda"})-[:WORKED_WITH]->(neo)

MATCH (you {name:"You"})
MATCH (expert)-[:WORKED_WITH]->(db:Database {name:"Neo4j"})
MATCH path = shortestPath( (you)-[:FRIEND*..5]-(expert) )
RETURN db,expert,path


# Russian trolls

MATCH (u:User)-[r1:POSTED]->(t:Tweet)
WHERE u.followers_count > 1000
WITH COUNT(t) AS num
RETURN num

MATCH (u:User)-[r1:POSTED]->(t:Tweet)
WHERE u.followers_count > 1000
RETURN u LIMIT 1000


MATCH (u:User)-[:POSTED]->(t:Tweet)-[:HAS_TAG]->(ht:Hashtag {tag: "thanksobama"})
RETURN * LIMIT 50

MATCH (t)
RETURN LABELS(t), COUNT(*) AS count
ORDER BY count DESC

MATCH (u:Troll) WHERE EXISTS(u.followers_count)
RETURN u.screen_name AS screen_name, u.followers_count AS followers
ORDER BY followers DESC LIMIT 50

MATCH (u:Troll) WHERE EXISTS(u.followers_count) and u.friends_count > 1000
RETURN u.screen_name AS screen_name, u.followers_count AS followers
ORDER BY followers DESC LIMIT 50

MATCH (u:Troll)
WHERE u.screen_name in ["Jenn_Abrams", "todayinsyria"]
RETURN u

MATCH (u:Troll)
RETURN u.location, COUNT(u) AS num
ORDER BY num DESC LIMIT 200

MATCH (u:Troll) WHERE u.location <> ""
RETURN u.location, COUNT(u) AS num
ORDER BY num DESC LIMIT 200

MATCH (u:Troll)
WHERE u.location = "СПб"
RETURN u

MATCH (u:User)-[:POSTED]->(t:Tweet)-[:HAS_TAG]->(ht:Hashtag {tag: "thanksobama"})
WHERE u.screen_name = "LeroyLovesUSA"
RETURN *

MATCH (t:Troll)-[:POSTED]->(tw:Tweet)
WHERE tw.text CONTAINS "fraud"
OPTIONAL MATCH p=(tw)-[:HAS_TAG|HAS_LINK|MENTIONS|IN_REPLY_TO]-(a)
RETURN * LIMIT 50

MATCH (:Troll)-[:POSTED]->(t:Tweet) WHERE t.created_str > "2016-10-01"
RETURN substring(t.created_str,0,10) AS day,
  COUNT(t) AS num ORDER BY day LIMIT 60


MATCH (ht:Hashtag)<-[:HAS_TAG]-(tw:Tweet)<-[:POSTED]-(:Troll)
WITH ht, COUNT(tw) AS num ORDER BY num DESC
RETURN ht.tag AS hashtag, num LIMIT 10

MATCH (:Troll)-[:POSTED]->(t:Tweet)
WHERE t.created_str > "2016-10-01" AND t.created_str < "2016-11-30"
WITH t,substring(t.created_str,0,10) AS day, [(t)-[:HAS_TAG]->(ht:Hashtag) | ht.tag] AS tags
UNWIND tags AS tag
WITH day, tag, COUNT(t) AS num ORDER BY num DESC
RETURN day, COLLECT(tag)[..5] AS toptags ORDER BY day

MATCH (u:Troll {screen_name: "WorldOfHashtags"})-[:POSTED]->(t:Tweet)-[:HAS_TAG]->(:Hashtag {tag: "rejecteddebatetopics"})
WHERE t.created_str > "2016-10-01"
RETURN t.text, t.created_str
ORDER BY t.created_at LIMIT 50

MATCH (:Troll)-[:POSTED]->(tw:Tweet)-[:POSTED_VIA]->(s:Source)
RETURN s.name AS source, COUNT(tw) AS tweets
ORDER BY tweets DESC

MATCH p=(t:Troll {user_key: "ten_gop"})-[:POSTED]->(tw:Tweet)
WHERE NOT EXISTS((tw)-[:RETWEETED|IN_REPLY_TO]->(:Tweet))
OPTIONAL MATCH (ht:Hashtag)<-[:HAS_TAG]-(tw)
OPTIONAL MATCH (u:User)<-[:MENTIONS]-(tw)
RETURN p,ht,u LIMIT 25

MATCH p=(r1:Troll)-[:POSTED]->(:Tweet)<-[:RETWEETED]-(:Tweet)<-[:POSTED]-(r2:Troll)
RETURN p LIMIT 10

CALL dbms.procedures()
YIELD name, signature, description
WITH * WHERE name STARTS WITH "algo"
RETURN *

CALL algo.pageRank("MATCH (t:Troll) RETURN id(t) AS id","MATCH (r1:Troll)-[:POSTED]->(:Tweet)<-[:RETWEETED]-(:Tweet)<-[:POSTED]-(r2:Troll) RETURN id(r2) as source, id(r1) as target", {graph:'cypher'})


MATCH (t:Troll) WHERE EXISTS(t.pagerank)
RETURN t.screen_name AS troll, t.pagerank AS pagerank ORDER BY pagerank DESC LIMIT 25

MATCH (t:Troll) WHERE EXISTS(t.pagerank)
WITH t ORDER BY t.pagerank LIMIT 25
MATCH (t)-[:POSTED]->(tw:Tweet)-[:HAS_TAG]-(ht:Hashtag)
RETURN ht.tag, COUNT(tw) AS num ORDER BY num DESC LIMIT 25

CALL algo.labelPropagation("MATCH (t:Troll) RETURN id(t) AS id","MATCH (r1:Troll)-[:POSTED]->(t:Tweet)<-[:RETWEETED]-(:Tweet)<-[:POSTED]-(r2:Troll) RETURN id(r2) AS source, id(r1) AS target, COUNT(t) AS weight","OUTGOING",   {graph:'cypher', write: true, iterations: 200})

MATCH (t:Troll) WHERE EXISTS(t.partition)
RETURN COLLECT(t.screen_name) AS members, t.partition AS community
ORDER BY SIZE(members) DESC LIMIT 10
